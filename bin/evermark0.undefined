#!/usr/bin/env node
/* eslint no-console: 0 */

require('babel-register')
require('babel-polyfill')

const fs = require('fs')
const path = require('path')
const co = require('co')

// const co = require('co')
const home = require('home')()
// const _ = require('lodash')
// const open = require('open')
const chalk = require('chalk')
const program = require('commander')

// const utils = require('../lib/utils')
const pkg = require('../package.json')
const app = require('../src/app')
const fileUtils = require('../src/fileUtils')
const logger = require('../src/logger')

program
  .version(pkg.version)
  .usage('[command]')
  .on('*', () => {
    program.help()
  })

program
  .command('config [name] [value]')
  .description('Get or set configurations.')
  .action(getOrSetConfig)

program
  .command('list <type>')
  .description('List the information of locale notebooks/notes.')
  .action(listNotebooks)

program
  .command('new <title>')
  .description('Create a new note.')
  .action(createNote)

program
  .command('publish <file1> [file2] ...')
  .description('Publish locale notes/notebooks to Evernote.')
  .action(publishNote)

program
  .command('help [command]')
  .description('Get help on a command.')
  .action(commandHelp)

program.parse(process.argv)

if (process.argv.length === 2) {
  program.help()
}

function bold(command) {
  return chalk.bold(command)
}

function commandHelp(command) {
  switch (command) {
    case 'config':
      configHelp()
      break
    case 'list':
      listHelp()
      break
    case 'new':
      newHelp()
      break
    default:
      program.help()
  }
}

function configHelp() {
  printCommandHelp('config', 'Get or set configurations.', {
    '[name]': 'Setting name. Leave it blank if you want to show all configurations.',
    '[value]': 'New value of a setting. ' +
      'Leave it blank if you want to show a single configuration.',
  })
}

function listHelp() {
  printCommandHelp('list', 'List the information of locale notebooks/notes.', {
    '<type>': 'Available types: notebook, note',
  })
}

function newHelp() {
  printCommandHelp('new', 'Create a new note.', {
    '<title>': 'Note title. Wrap it with quotations to escape.',
  })
}

function printCommandHelp(command, desc, args = {}) {
  console.log()
  console.log(`  Usage: evermark ${command} ${Object.keys(args).map(k => k).join(' ')}`)
  console.log()
  console.log('  Description:')
  console.log(`  ${desc}`)

  const argDesc = Object.keys(args)
    .map(k => `    ${bold(k.substring(1, k.length - 1))}\t${args[k]}`)
  if (argDesc.length) {
    console.log()
    console.log('  Arguments:')
    argDesc.map(s => console.log(s))
  }

  console.log()
}

function readConfig() {
  let config = {}
  const configPath = path.join(home, '.evermark.json')

  try {
    const configStr = fs.readFileSync(configPath, 'utf8')
    config = JSON.parse(configStr)
  } catch (e) {
    logger.error(e)
    logger.error(`Please write to ${configPath}:\n\n{\n  "token": "xxx",\n  "china": xxx\n}`)
    process.exit(1)
  }

  if (!config.token) {
    logger.info('Please fill in your developer token')
    logger.info('To get a developer token, visit https://sandbox.evernote.com/api/DeveloperToken.action')
    process.exit(1)
  }

  return config
}

function getOrSetConfig(name, value) {
  const config = readConfig()

  if (!name) {
    logger.info(config)
    return
  }

  if (!value) {
    logger.info(`${name}: ${config[name]}`)
  }
}

function getClient() {
  const EvernoteClient = app.EvernoteClient
  return new EvernoteClient(readConfig())
}

function listNotebooks(type) {
  co(function* fn() {
    yield (type === 'notebook' ? getClient().listNotebooks() : [])
  })
}

function createNote(title) {
  co(function* fn() {
    const configPath = yield findConfigPath('evermark.json')
    if (!configPath) {
      process.exit(1)
    }

    const noteDir = path.dirname(configPath)
    const notePath = `${noteDir}/notes/${title}.md`
    yield fileUtils.ensureFile(notePath)
    yield fileUtils.writeFile(notePath, `---
title: ${title}
tags:
notebook:
---
`)
    logger.info(`Created note: ${chalk.magenta(notePath)}`)
  }).catch(e => console.error(e))
}

function publishNote(file) {
  co(function* fn() {
    const content = yield fileUtils.readFile(file)
    const title = path.basename(file)
    // console.log('title:', title)
    // console.log('content:', content)
    // yield getClient().findNotes('Shell 脚本编程 30 分钟入门')
    // yield getClient().getNoteContent('889c60d6-79de-4a01-ba54-0ec934e1896e')
    yield getClient().createNote(title, content)
  }).catch(e => console.error(e))
}

function* findConfigPath(config, dir = './') {
  const currentConfigPath = path.resolve(dir, config)
  const isExists = yield fileUtils.exists(currentConfigPath)
  if (isExists) {
    return currentConfigPath
  }

  const nextConfigPath = path.resolve(`${dir}../`, config)
  if (nextConfigPath === currentConfigPath) {
    return null
  }

  return yield findConfigPath(config, `${dir}../`)
}
